apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{name}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{name}}
  template:
    metadata:
      labels:
        app: {{name}}
    spec:
      containers:
      - name: app
        image: {{image}}
        env:
        - name: ASPNETCORE_URLS
          value: http://*:5000
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
        volumeMounts:
        - mountPath: /appdata
          name: appdata-volume
      volumes:
      - name: appdata-volume
        hostPath:
          path: {{appdataPath}}
          type: Directory
      securityContext:
        # allowPrivilegeEscalation: false # Doesn't seem to work
        runAsUser: {{user}}
        runAsGroup: {{group}}
        # fsGroup: 15000 # Maybe don't need this
        runAsNonRoot: true
      initContainers:
      - name: app-init
        image: {{image}}
        command: ['sh', '-c', '{{initCommand}}']
        env:
        - name: ASPNETCORE_URLS
          value: http://*:5000
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
        volumeMounts:
        - mountPath: /appdata
          name: appdata-volume
      volumes:
      - name: appdata-volume
        hostPath:
          path: {{appdataPath}}
          type: Directory
      securityContext:
        # allowPrivilegeEscalation: false # Doesn't seem to work
        runAsUser: {{user}}
        runAsGroup: {{group}}
        # fsGroup: 15000 # Maybe don't need this
        runAsNonRoot: true

---

apiVersion: v1
kind: Service
metadata:
  name: {{name}}
spec:
  selector:
    app: {{name}}
  ports:
  - port: 80
    targetPort: 5000

---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{name}}
spec:
  rules:
  - host: localhost
    http:
      paths:
      - backend:
          serviceName: {{name}}
          servicePort: 80

---